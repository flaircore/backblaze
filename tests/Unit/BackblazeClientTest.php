<?php

namespace Flaircore\Backblaze\Tests\Unit;

use Flaircore\Backblaze\Clients\BackblazeClient;
use GuzzleHttp\Client;
use PHPUnit\Framework\TestCase;
use GuzzleHttp\Handler\MockHandler;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Psr7\Response;

/**
 * Tests BackblazeClient, request definitions and payload.
 */
class BackblazeClientTest extends TestCase {

	protected $b2Client;
	protected function setUp(): void {
		// Given a  BackblazeClient object
		// @TODO include co
		$this->b2Client =	$this->createMock(BackblazeClient::class);
	}

	protected function tearDown(): void {
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function testb2AuthorizeAccount(){
		$mockResponse = json_encode([
			'authorizationToken' => 'A token',
			'apiUrl' => 'https://an-api-url',
		]);

		// Create a mock and queue just a response.
		$mock = new MockHandler([
			function ($request) use ($mockResponse) {
			// Assert method and headers
				$this->assertEquals('GET', $request->getMethod());
				$this->assertArrayHasKey('Authorization', $request->getHeaders());
				return new Response(
					200,
					[],
					$mockResponse
				);
			},
		]);

		$handlerStack = HandlerStack::create($mock);

		$client = new Client(['handler' => $handlerStack]);

		$this->b2Client->method('client')->willReturn($client);
		$this->b2Client->b2AuthorizeAccount();

	}

	public function testb2GetUploadUrl(){
		$mockResponse = json_encode([
			'authorizationToken' => 'A token',
			'apiUrl' => 'https://an-api-url',
		]);

		// Create a mock and queue just a response.
		$mock = new MockHandler([
			function ($request) use ($mockResponse) {
				// Assert method, headers and data posted bt b2GetUploadUrl method.
				$this->assertEquals('POST', $request->getMethod());
				$this->assertArrayHasKey('Authorization', $request->getHeaders());
				$this->assertArrayHasKey('bucketId', json_decode($request->getBody(), true));
				return new Response(
					200,
					[],
					$mockResponse
				);
			},
		]);

		$handlerStack = HandlerStack::create($mock);
		$client = new Client(['handler' => $handlerStack]);
		$this->b2Client->method('client')->willReturn($client);
		$this->b2Client->b2GetUploadUrl('the_api_url', 'the_auth_token');

	}

	public function testb2GetUploadPartUrl(){
		$fileId = 'the_file_id';
		$mockResponse = json_encode([
			'authorizationToken' => 'A token',
			'apiUrl' => 'https://an-api-url',
		]);

		// Create a mock and queue just a response.
		$mock = new MockHandler([
			function ($request) use ($mockResponse, $fileId) {
				// Assert method, headers and data posted bt b2GetUploadPartUrl method.
				$this->assertEquals('POST', $request->getMethod());
				$this->assertArrayHasKey('Authorization', $request->getHeaders());
				$this->assertEquals(json_decode($request->getBody())->fileId, $fileId);
				return new Response(
					200,
					[],
					$mockResponse
				);
			},
		]);

		$handlerStack = HandlerStack::create($mock);
		$client = new Client(['handler' => $handlerStack]);
		$this->b2Client->method('client')->willReturn($client);
		$this->b2Client->b2GetUploadPartUrl('the_api_url', 'the_auth_token', $fileId);

	}
}